#!/usr/bin/env node

try {
	RegExp("\\p{Emoji}", "u");
} catch (e) {
	console.log("We require Node.js version 10 or later; you're using " + process.version);
	process.exit(1);
}

var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

function shell(cmd) {
	child_process.execSync(cmd, {stdio: 'inherit', cwd: __dirname});
}

function sucrase(src, out) {
	shell(`sucrase ${src} -d ${out} --transforms typescript,imports --enable-legacy-typescript-module-interop`);
}

function replace(file, replacements) {
	fs.lstat(file, function (err, stats) {
		if (err) throw err;
		if (stats.isSymbolicLink()) return;
		if (stats.isFile()) {
			if (!file.endsWith('.js')) return;
			fs.readFile(file, "utf-8", function (err, text) {
					if (err) throw err;
					var anyMatch = false;
					for (var i = 0; i < replacements.length; i++) {
						anyMatch = anyMatch || text.match(replacements[i].regex);
						if (anyMatch) text = text.replace(replacements[i].regex, replacements[i].replace);
					}
					if (!anyMatch) return;
					fs.writeFile(file, text, function (err) {
						if (err) throw err;
					});
				});
		} else if (stats.isDirectory()) {
			fs.readdir(file, function (err, files) {
				if (err) throw err;
				for (var i = 0; i < files.length; i++) {
					replace(path.join(file, files[i]), replacements);
				}
			});
		}
	});
}

try {
	var sucraseVersion = require('sucrase').getVersion().split('.');
	if (
		parseInt(sucraseVersion[0]) < 3 ||
		(parseInt(sucraseVersion[0]) === 3 && parseInt(sucraseVersion[1]) < 12)
	) {
		throw new Error("Sucrase version too old");
	}
} catch (e) {
	console.log('Installing dependencies...');
	shell('npm install --production');
}

sucrase('./src', './.src-dist');